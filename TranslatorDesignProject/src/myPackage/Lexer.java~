/* The following code was generated by JFlex 1.4.3 on 1/9/21 10:04 PM */

package myPackage;
import static myPackage.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/9/21 10:04 PM from the specification file
 * <tt>D:/FACULTATE AUTOMATICA/ANI de studiu/ANUL 4/TranslatorDesignProject/src/myPackage/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\65\2\0\1\1\22\0\1\1\1\0\1\56\11\0"+
    "\1\1\2\0\1\6\12\0\2\0\1\2\1\55\1\7\2\0\1\21"+
    "\1\3\1\12\1\20\1\17\1\23\1\5\1\32\1\4\1\0\1\13"+
    "\1\10\1\41\1\24\1\11\1\51\1\14\1\34\1\22\1\16\1\15"+
    "\1\45\2\0\1\30\1\0\4\0\1\0\1\0\1\36\1\25\1\37"+
    "\1\27\1\43\1\60\1\62\1\33\1\53\1\0\1\63\1\61\1\42"+
    "\1\40\1\26\1\52\1\0\1\35\1\44\1\50\1\47\1\46\1\57"+
    "\1\64\1\31\1\54\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\17\1\1\4\7\0"+
    "\1\5\1\0\1\4\3\0\1\2\32\0\1\6\11\0"+
    "\1\7\26\0\1\10\1\0\1\11\1\12\1\0\1\13"+
    "\12\0\1\14\1\15\41\0\1\16\3\0\1\17\2\0"+
    "\1\20\1\0\1\21\1\0\1\22\27\0\1\23\14\0"+
    "\1\24\3\0\1\25\1\26\1\27\1\30\1\31\41\0"+
    "\1\6\13\0\1\32\1\0\2\33\10\0\1\34\12\0"+
    "\1\35\2\0\1\36\1\37\1\0\1\40\13\0\1\41"+
    "\1\42\1\0\1\43\1\0\1\44\2\0\1\45\2\0"+
    "\1\46\1\0\1\47\1\50\1\0\1\51\1\52\12\0"+
    "\1\6\30\0\1\53\1\54\3\0\1\55\2\0\1\56"+
    "\1\0\1\57\3\0\1\60\3\0\1\61\1\62\1\63"+
    "\1\64\1\65\12\0\1\66\6\0\1\67\5\0\1\70"+
    "\1\71\1\0\1\72\6\0\1\73\5\0\1\74\13\0"+
    "\1\75\2\0\1\76\1\0\1\77\3\0\1\100\1\0"+
    "\1\101\2\0\1\102\2\0\1\103\1\0\1\104\1\105"+
    "\1\0\1\106\1\107\1\0\1\110\10\0\1\111\5\0"+
    "\1\112\1\0\1\113\1\114\4\0\1\115\4\0\1\116"+
    "\1\117\2\0\1\120\5\0\1\121\1\122\6\0\1\123"+
    "\2\0\1\124\1\125\1\126\7\0\1\127\1\130\1\0"+
    "\1\131\3\0\1\132\1\133\1\0\1\134\1\0\1\135"+
    "\1\136\1\0\1\137\1\0\1\140\2\0\1\141\5\0"+
    "\1\142\1\143\1\144\1\145\2\0\1\146\1\147\1\150"+
    "\1\0\1\151\1\0\1\152\1\153\4\0\1\154\1\155"+
    "\1\156\3\0\1\157\1\0\1\160\1\161\1\0\1\162"+
    "\1\163\1\164\1\165\4\0\1\166\1\167\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\66\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\66\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\66"+
    "\0\u139e\0\66\0\66\0\u13d4\0\66\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\66"+
    "\0\66\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a"+
    "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\66\0\u1d1c\0\u1d52\0\u1d88\0\66\0\u1dbe"+
    "\0\u1df4\0\66\0\u1e2a\0\66\0\u1e60\0\66\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\66\0\u2370\0\u23a6"+
    "\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\66\0\66"+
    "\0\66\0\66\0\66\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8"+
    "\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958"+
    "\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8"+
    "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018"+
    "\0\66\0\u304e\0\u3084\0\66\0\u30ba\0\u30f0\0\u3126\0\u315c"+
    "\0\u3192\0\u31c8\0\u31fe\0\u3234\0\66\0\u326a\0\u32a0\0\u32d6"+
    "\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\66"+
    "\0\u3486\0\u34bc\0\66\0\66\0\u34f2\0\66\0\u3528\0\u355e"+
    "\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e"+
    "\0\u3744\0\66\0\66\0\u377a\0\66\0\u37b0\0\66\0\u37e6"+
    "\0\u381c\0\66\0\u3852\0\u3888\0\66\0\u38be\0\66\0\66"+
    "\0\u38f4\0\66\0\66\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02"+
    "\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2"+
    "\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\66\0\66"+
    "\0\u408c\0\u40c2\0\u40f8\0\66\0\u412e\0\u4164\0\66\0\u419a"+
    "\0\66\0\u41d0\0\u4206\0\u423c\0\66\0\u4272\0\u42a8\0\u42de"+
    "\0\66\0\66\0\66\0\66\0\66\0\u4314\0\u434a\0\u4380"+
    "\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa\0\66"+
    "\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa"+
    "\0\u46e0\0\u4716\0\u474c\0\u4782\0\66\0\66\0\u47b8\0\66"+
    "\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\66\0\u4932"+
    "\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\66\0\u4a40\0\u4a76\0\u4aac"+
    "\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c"+
    "\0\66\0\u4c92\0\u4cc8\0\66\0\u4cfe\0\66\0\u4d34\0\u4d6a"+
    "\0\u4da0\0\66\0\u4dd6\0\66\0\u4e0c\0\u4e42\0\66\0\u4e78"+
    "\0\u4eae\0\66\0\u4ee4\0\66\0\66\0\u4f1a\0\66\0\66"+
    "\0\u4f50\0\66\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u505e\0\u5094"+
    "\0\u50ca\0\u5100\0\66\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e"+
    "\0\66\0\u5244\0\66\0\66\0\u527a\0\u52b0\0\u52e6\0\u531c"+
    "\0\66\0\u5352\0\u5388\0\u53be\0\u53f4\0\66\0\66\0\u542a"+
    "\0\u5460\0\66\0\u5496\0\u54cc\0\u5502\0\u5538\0\u556e\0\66"+
    "\0\66\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\66"+
    "\0\u56e8\0\u571e\0\66\0\66\0\66\0\u5754\0\u578a\0\u57c0"+
    "\0\u57f6\0\u582c\0\u5862\0\u5898\0\66\0\66\0\u58ce\0\66"+
    "\0\u5904\0\u593a\0\u5970\0\66\0\66\0\u59a6\0\66\0\u59dc"+
    "\0\66\0\66\0\u5a12\0\66\0\u5a48\0\66\0\u5a7e\0\u5ab4"+
    "\0\66\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\66\0\66"+
    "\0\66\0\66\0\u5bf8\0\u5c2e\0\66\0\66\0\66\0\u5c64"+
    "\0\66\0\u5c9a\0\66\0\66\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72"+
    "\0\66\0\66\0\66\0\u5da8\0\u5dde\0\u5e14\0\66\0\u5e4a"+
    "\0\66\0\66\0\u5e80\0\66\0\66\0\66\0\66\0\u5eb6"+
    "\0\u5eec\0\u5f22\0\u5f58\0\66\0\66\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\2\1\5\1\6\15\2\1\7"+
    "\5\2\1\10\1\2\1\11\1\12\1\13\1\14\1\2"+
    "\1\15\1\16\1\17\1\2\1\20\1\21\1\22\2\2"+
    "\1\23\3\2\1\24\1\2\1\25\3\2\1\3\67\0"+
    "\1\3\63\0\1\3\3\0\1\26\1\27\1\0\1\30"+
    "\1\0\1\31\1\0\1\32\1\33\3\0\1\34\1\35"+
    "\1\36\1\0\1\37\1\0\1\40\4\0\1\41\1\42"+
    "\2\0\1\36\1\43\34\0\1\44\57\0\2\6\1\0"+
    "\63\6\26\0\1\45\7\0\1\46\23\0\1\47\40\0"+
    "\1\50\6\0\1\51\64\0\1\52\61\0\1\53\21\0"+
    "\1\54\32\0\1\55\4\0\1\56\25\0\1\57\32\0"+
    "\1\60\7\0\1\61\65\0\1\62\4\0\1\63\62\0"+
    "\1\64\60\0\1\65\1\0\1\66\15\0\1\67\50\0"+
    "\1\70\5\0\1\71\14\0\1\72\50\0\1\73\52\0"+
    "\1\74\11\0\1\75\7\0\1\76\41\0\1\77\71\0"+
    "\1\100\17\0\1\101\65\0\1\102\16\0\1\103\3\0"+
    "\1\104\1\105\3\0\1\106\2\0\1\107\1\110\4\0"+
    "\1\105\5\0\2\111\1\112\10\0\1\106\42\0\1\113"+
    "\14\0\1\114\27\0\1\115\1\116\3\0\1\117\1\0"+
    "\1\120\1\121\3\0\1\122\1\123\1\124\1\0\1\125"+
    "\1\0\1\126\4\0\1\127\1\130\2\0\1\124\1\131"+
    "\47\0\1\132\50\0\1\133\4\0\1\134\5\0\1\135"+
    "\1\0\1\136\14\0\1\136\32\0\1\137\123\0\1\140"+
    "\30\0\1\141\3\0\1\142\5\0\1\143\1\144\1\145"+
    "\2\0\1\146\45\0\1\147\6\0\1\150\5\0\1\151"+
    "\4\0\1\147\1\0\1\151\4\0\2\152\1\0\1\150"+
    "\32\0\1\153\4\0\1\154\22\0\1\155\42\0\1\105"+
    "\3\0\1\106\3\0\1\112\4\0\1\105\5\0\2\111"+
    "\1\112\10\0\1\106\34\0\1\156\1\157\14\0\2\160"+
    "\2\0\1\161\61\0\2\160\51\0\1\136\14\0\1\136"+
    "\27\0\65\44\36\0\1\162\67\0\1\163\65\0\1\164"+
    "\71\0\1\165\74\0\1\166\61\0\1\167\12\0\1\170"+
    "\54\0\1\171\65\0\1\172\2\0\1\173\40\0\1\174"+
    "\13\0\1\175\16\0\1\176\47\0\1\177\60\0\1\200"+
    "\62\0\1\201\74\0\1\202\107\0\1\203\51\0\1\204"+
    "\54\0\1\205\64\0\1\206\66\0\1\207\102\0\1\210"+
    "\72\0\1\211\56\0\1\212\66\0\1\213\55\0\1\214"+
    "\74\0\1\215\77\0\1\216\51\0\1\217\70\0\1\220"+
    "\41\0\1\221\76\0\1\222\32\0\1\223\71\0\1\224"+
    "\74\0\1\225\6\0\1\225\54\0\1\226\31\0\1\226"+
    "\26\0\1\227\76\0\1\230\21\0\1\231\43\0\1\231"+
    "\21\0\1\231\43\0\1\232\26\0\1\233\21\0\1\234"+
    "\64\0\1\235\2\0\1\236\1\237\1\240\3\0\1\241"+
    "\2\0\1\242\1\243\4\0\1\240\5\0\2\244\1\245"+
    "\10\0\1\241\42\0\1\246\14\0\1\247\45\0\1\250"+
    "\50\0\1\251\4\0\1\252\5\0\1\253\1\0\1\254"+
    "\14\0\1\254\32\0\1\255\123\0\1\256\30\0\1\257"+
    "\3\0\1\260\5\0\1\261\1\262\1\263\2\0\1\264"+
    "\45\0\1\265\3\0\1\266\2\0\1\267\5\0\1\270"+
    "\4\0\1\265\1\0\1\270\4\0\2\271\1\0\1\267"+
    "\32\0\1\272\4\0\1\273\22\0\1\274\40\0\1\236"+
    "\1\0\1\240\3\0\1\241\3\0\1\245\4\0\1\240"+
    "\5\0\2\244\1\245\10\0\1\241\34\0\1\275\1\276"+
    "\14\0\2\277\2\0\1\300\61\0\2\277\51\0\1\254"+
    "\14\0\1\254\32\0\1\301\100\0\1\302\57\0\1\303"+
    "\7\0\1\304\71\0\1\305\112\0\2\306\33\0\1\307"+
    "\101\0\1\310\10\0\2\311\27\0\1\312\101\0\1\313"+
    "\44\0\1\314\21\0\1\314\74\0\2\315\50\0\1\316"+
    "\6\0\1\316\55\0\1\317\23\0\1\317\41\0\1\320"+
    "\72\0\1\321\7\0\1\322\52\0\1\323\105\0\1\324"+
    "\45\0\1\325\73\0\1\326\121\0\1\327\30\0\1\330"+
    "\117\0\1\331\43\0\1\332\104\0\1\333\65\0\1\334"+
    "\63\0\1\335\67\0\1\336\50\0\1\337\21\0\1\340"+
    "\40\0\1\341\102\0\1\342\41\0\1\343\76\0\1\344"+
    "\72\0\1\345\56\0\1\346\73\0\1\347\103\0\1\350"+
    "\37\0\1\351\102\0\1\352\67\0\1\353\70\0\1\354"+
    "\53\0\1\355\71\0\1\356\54\0\1\357\67\0\1\360"+
    "\67\0\1\361\66\0\1\362\72\0\1\363\76\0\1\364"+
    "\65\0\1\365\54\0\1\366\100\0\1\367\14\0\1\370"+
    "\103\0\2\371\52\0\1\372\31\0\1\372\34\0\1\373"+
    "\23\0\1\374\41\0\1\374\23\0\1\374\37\0\1\375"+
    "\55\0\1\376\71\0\1\377\74\0\1\u0100\6\0\1\u0100"+
    "\54\0\1\u0101\31\0\1\u0101\26\0\1\u0102\76\0\1\u0103"+
    "\21\0\1\u0104\30\0\1\u0105\100\0\1\u0104\21\0\1\u0104"+
    "\43\0\1\u0106\26\0\1\u0107\21\0\1\u0108\63\0\1\u0109"+
    "\100\0\1\u010a\57\0\1\u010b\7\0\1\u010c\71\0\1\u010d"+
    "\112\0\2\u010e\33\0\1\u010f\54\0\1\u0110\112\0\1\u0111"+
    "\10\0\2\u0112\26\0\1\u0113\65\0\1\u0114\66\0\1\u0115"+
    "\64\0\1\u0116\102\0\1\u0117\44\0\1\u0118\21\0\1\u0118"+
    "\74\0\2\u0119\50\0\1\u011a\6\0\1\u011a\55\0\1\u011b"+
    "\23\0\1\u011b\41\0\1\u011c\72\0\1\u011d\7\0\1\u011e"+
    "\52\0\1\u011f\105\0\1\u0120\45\0\1\u0121\53\0\1\u0122"+
    "\65\0\1\u0123\75\0\1\u0124\65\0\1\u0125\53\0\1\u0126"+
    "\77\0\1\u0127\64\0\1\u0128\65\0\1\u0129\31\0\1\u0129"+
    "\51\0\2\u012a\41\0\1\u012b\14\0\1\u012b\73\0\2\u012c"+
    "\51\0\1\u012d\14\0\1\u012d\37\0\1\u012e\73\0\1\u012f"+
    "\110\0\1\u0130\65\0\1\u0131\34\0\1\u0132\75\0\1\u0133"+
    "\110\0\1\u0134\104\0\1\u0135\64\0\1\u0136\61\0\1\u0137"+
    "\47\0\1\u0138\104\0\1\u0139\65\0\1\u013a\35\0\1\u013b"+
    "\115\0\1\u013c\72\0\1\u013d\42\0\1\u013e\54\0\1\u013f"+
    "\74\0\1\u0140\64\0\1\u0141\113\0\1\u0142\46\0\1\77"+
    "\64\0\1\u0143\77\0\1\u0144\53\0\1\u0145\50\0\1\u0146"+
    "\70\0\1\u0147\77\0\1\u0148\100\0\1\u0149\64\0\1\u014a"+
    "\53\0\1\u014b\61\0\1\u014c\111\0\1\u014d\40\0\1\u014e"+
    "\104\0\1\u014f\65\0\1\u0150\53\0\1\u0151\65\0\1\77"+
    "\55\0\1\u0152\107\0\1\u0153\23\0\1\u0154\63\0\1\u0155"+
    "\14\0\1\u0155\62\0\1\u0156\60\0\1\u0157\56\0\1\u0158"+
    "\70\0\1\u0159\103\0\2\u015a\52\0\1\u015b\31\0\1\u015b"+
    "\24\0\1\u015c\75\0\1\u015d\23\0\1\u015e\41\0\1\u015e"+
    "\23\0\1\u015e\31\0\1\u015f\73\0\1\u0160\57\0\1\u0161"+
    "\75\0\1\u0162\65\0\1\u0163\53\0\1\u0164\1\0\1\u0165"+
    "\75\0\1\u0166\64\0\1\u0167\65\0\1\u0168\31\0\1\u0168"+
    "\24\0\1\u0169\65\0\1\u016a\65\0\1\u016b\65\0\1\u016c"+
    "\65\0\1\u016d\112\0\2\u016e\41\0\1\u016f\14\0\1\u016f"+
    "\73\0\2\u0170\51\0\1\u0171\14\0\1\u0171\37\0\1\u0172"+
    "\73\0\1\u0173\110\0\1\u0174\65\0\1\u0175\34\0\1\u0176"+
    "\75\0\1\u0177\55\0\1\u0178\111\0\1\u0179\50\0\1\u017a"+
    "\52\0\1\u017b\46\0\1\u017b\36\0\1\u017c\13\0\1\u017c"+
    "\44\0\1\u017d\23\0\1\u017d\42\0\1\u017e\64\0\1\u017f"+
    "\103\0\1\u0180\65\0\1\u0181\56\0\1\u0182\115\0\1\u0183"+
    "\52\0\1\u0184\22\0\56\u0139\1\u0185\7\u0139\56\u013a\1\u0186"+
    "\7\u013a\40\0\1\u0187\25\0\56\u013c\1\u0188\7\u013c\55\0"+
    "\1\u0189\65\0\1\u018a\54\0\1\u018b\60\0\1\u018c\103\0"+
    "\1\u018d\53\0\1\u018e\102\0\1\u018f\63\0\1\u0190\47\0"+
    "\1\u0191\54\0\1\u0192\110\0\1\u0193\70\0\1\u0194\10\0"+
    "\56\u0149\1\u0195\7\u0149\56\0\1\u0196\64\0\1\u0197\53\0"+
    "\1\u0198\77\0\1\u0199\62\0\1\u019a\71\0\1\u019b\65\0"+
    "\1\u019c\64\0\1\u019d\65\0\1\u019e\66\0\1\u019f\23\0"+
    "\1\u01a0\75\0\1\u01a1\13\0\1\u01a1\36\0\1\u01a2\67\0"+
    "\1\u01a3\61\0\1\u01a4\67\0\1\u01a5\14\0\1\u01a5\46\0"+
    "\1\u01a6\13\0\1\u01a7\51\0\1\u01a6\74\0\1\u01a8\57\0"+
    "\1\u01a9\64\0\1\u01aa\112\0\1\u01ab\40\0\1\u01ac\75\0"+
    "\1\u01ad\52\0\1\u01ae\46\0\1\u01ae\21\0\1\u01af\102\0"+
    "\1\u01b0\13\0\1\u01b0\44\0\1\u01b1\23\0\1\u01b1\31\0"+
    "\1\u01b2\76\0\1\u01b3\54\0\1\u01b4\65\0\1\u01b5\75\0"+
    "\1\u01b6\55\0\1\u01b7\65\0\1\u01b8\67\0\1\u01b9\110\0"+
    "\1\u01ba\42\0\1\u01bb\14\0\1\u01bb\67\0\2\u01bc\56\0"+
    "\1\u01bd\21\0\1\u01bd\43\0\1\u01be\65\0\1\u01bf\120\0"+
    "\1\u01c0\36\0\1\u01c1\74\0\1\u01c2\30\0\56\u0183\1\u01c3"+
    "\7\u0183\55\0\1\u01c4\65\0\1\u01c5\66\0\1\u01c6\65\0"+
    "\1\u01c7\64\0\1\u01c8\60\0\1\u01c9\73\0\1\u01ca\36\0"+
    "\1\u01cb\36\0\56\u0190\1\u01cc\7\u0190\62\0\1\u01cd\60\0"+
    "\1\u01ce\53\0\1\u01cf\100\0\1\u01d0\7\0\56\u0196\1\u01d1"+
    "\7\u0196\56\0\1\u01d2\64\0\1\u01d3\66\0\1\u01d4\64\0"+
    "\1\u01d5\10\0\56\u019b\1\u01d6\7\u019b\56\u019c\1\u01d7\7\u019c"+
    "\56\0\1\u01d8\65\0\1\u01d9\7\0\56\u019f\1\u01da\7\u019f"+
    "\15\0\1\u01db\74\0\1\u01dc\55\0\1\u01dd\75\0\1\u01de"+
    "\13\0\1\u01de\36\0\1\u01df\63\0\1\u01e0\65\0\1\u01e1"+
    "\67\0\1\u01e2\110\0\1\u01e3\42\0\1\u01e4\14\0\1\u01e4"+
    "\67\0\2\u01e5\56\0\1\u01e6\21\0\1\u01e6\43\0\1\u01e7"+
    "\52\0\1\u01e8\12\0\1\u01e9\60\0\1\u01ea\74\0\1\u01eb"+
    "\13\0\1\u01eb\66\0\2\u01ec\45\0\1\u01ed\21\0\1\u01ed"+
    "\40\0\1\u01ee\65\0\1\u01ef\124\0\1\u01f0\56\0\1\u01f1"+
    "\73\0\1\u01f2\66\0\1\u01f3\65\0\1\u01f4\7\0\56\u01c6"+
    "\1\u01f5\7\u01c6\56\u01c7\1\u01f6\7\u01c7\56\0\1\u01f7\7\0"+
    "\56\u01ca\1\u01f8\7\u01ca\50\0\1\u01f9\73\0\1\u01fa\64\0"+
    "\1\u01fb\10\0\56\u01d0\1\u01fc\7\u01d0\56\u01d2\1\u01fd\7\u01d2"+
    "\56\0\1\u01fe\7\0\56\u01d4\1\u01ff\7\u01d4\56\0\1\u0200"+
    "\7\0\56\u01d8\1\u0201\7\u01d8\56\u01d9\1\u0202\7\u01d9\11\0"+
    "\1\u0203\72\0\1\u0204\64\0\1\u0205\57\0\1\u0206\102\0"+
    "\1\u0207\56\0\1\u0208\57\0\1\u0209\102\0\1\u020a\13\0"+
    "\1\u020a\66\0\2\u020b\45\0\1\u020c\21\0\1\u020c\40\0"+
    "\1\u020d\65\0\1\u020e\117\0\1\u020f\32\0\1\u0210\65\0"+
    "\1\u0211\47\0\56\u01f0\1\u0212\7\u01f0\40\0\1\u0213\103\0"+
    "\1\u0214\7\0\56\u01f3\1\u0215\7\u01f3\56\u01f4\1\u0216\7\u01f4"+
    "\56\u01f7\1\u0217\7\u01f7\33\0\1\u0218\32\0\56\u01fa\1\u0219"+
    "\7\u01fa\56\0\1\u021a\7\0\56\u01fe\1\u021b\7\u01fe\56\u0200"+
    "\1\u021c\7\u0200\16\0\1\u021d\60\0\1\u021e\72\0\1\u021f"+
    "\120\0\1\u0220\23\0\1\u0221\65\0\1\u0222\65\0\1\u0223"+
    "\74\0\1\u0224\65\0\1\u0225\76\0\1\u0226\36\0\56\u0214"+
    "\1\u0227\7\u0214\55\0\1\u0228\10\0\56\u021a\1\u0229\7\u021a"+
    "\17\0\1\u022a\64\0\1\u022b\56\0\1\u022c\65\0\1\u022d"+
    "\65\0\1\u022e\65\0\1\u022f\133\0\1\u0230\66\0\1\u0231"+
    "\26\0\1\u0232\124\0\1\u0233\7\0\56\u0231\1\u0234\7\u0231"+
    "\7\0\1\u0235\56\0\56\u0233\1\u0236\7\u0233";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\7\0\1\1\1\0\1\1\3\0"+
    "\1\1\32\0\1\11\11\0\1\11\26\0\1\11\1\0"+
    "\2\11\1\0\1\11\12\0\2\11\41\0\1\11\3\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\27\0"+
    "\1\11\14\0\1\1\3\0\5\11\41\0\1\1\13\0"+
    "\1\11\1\0\1\1\1\11\10\0\1\11\12\0\1\11"+
    "\2\0\2\11\1\0\1\11\13\0\2\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\2\11\12\0\1\1\30\0\2\11\3\0\1\11"+
    "\2\0\1\11\1\0\1\11\3\0\1\11\3\0\5\11"+
    "\12\0\1\11\6\0\1\1\5\0\2\11\1\0\1\11"+
    "\6\0\1\11\5\0\1\11\13\0\1\11\2\0\1\11"+
    "\1\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\10\0\1\11\5\0\1\11\1\0\2\11\4\0\1\11"+
    "\4\0\2\11\2\0\1\11\5\0\2\11\6\0\1\11"+
    "\2\0\3\11\7\0\2\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\5\0\4\11\2\0\3\11\1\0\1\11"+
    "\1\0\2\11\4\0\3\11\3\0\1\11\1\0\2\11"+
    "\1\0\4\11\4\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { lexeme=yytext(); return DivOpen;
          }
        case 121: break;
        case 6: 
          { lexeme=yytext(); return Attributes;
          }
        case 122: break;
        case 18: 
          { lexeme=yytext(); return BClose;
          }
        case 123: break;
        case 46: 
          { lexeme=yytext(); return InsClose;
          }
        case 124: break;
        case 85: 
          { lexeme=yytext(); return AcronymOpen;
          }
        case 125: break;
        case 43: 
          { lexeme=yytext(); return InputOpen;
          }
        case 126: break;
        case 66: 
          { lexeme=yytext(); return AbbrClose;
          }
        case 127: break;
        case 68: 
          { lexeme=yytext(); return FontClose;
          }
        case 128: break;
        case 99: 
          { lexeme=yytext(); return FieldsetOpen;
          }
        case 129: break;
        case 72: 
          { lexeme=yytext(); return CenterOpen;
          }
        case 130: break;
        case 79: 
          { lexeme=yytext(); return TEXT_ATTR;
          }
        case 131: break;
        case 39: 
          { lexeme=yytext(); return FontOpen;
          }
        case 132: break;
        case 60: 
          { lexeme=yytext(); return SRC_ATTR;
          }
        case 133: break;
        case 49: 
          { lexeme=yytext(); return KbdClose;
          }
        case 134: break;
        case 81: 
          { lexeme=yytext(); return InputClose;
          }
        case 135: break;
        case 13: 
          { lexeme=yytext(); return HnOpen;
          }
        case 136: break;
        case 28: 
          { lexeme=yytext(); return BrClose;
          }
        case 137: break;
        case 64: 
          { lexeme=yytext(); return CiteClose;
          }
        case 138: break;
        case 30: 
          { lexeme=yytext(); return DlClose;
          }
        case 139: break;
        case 36: 
          { lexeme=yytext(); return CodeOpen;
          }
        case 140: break;
        case 109: 
          { lexeme=yytext(); return AcronymClose;
          }
        case 141: break;
        case 56: 
          { lexeme=yytext(); return REV_ATTR;
          }
        case 142: break;
        case 24: 
          { lexeme=yytext(); return DelOpen;
          }
        case 143: break;
        case 108: 
          { lexeme=yytext(); return CaptionClose;
          }
        case 144: break;
        case 69: 
          { lexeme=yytext(); return FormClose;
          }
        case 145: break;
        case 5: 
          { lexeme=yytext(); return AOpen;
          }
        case 146: break;
        case 106: 
          { lexeme=yytext(); return VSPACE_ATTR;
          }
        case 147: break;
        case 71: 
          { lexeme=yytext(); return HeadClose;
          }
        case 148: break;
        case 74: 
          { lexeme=yytext(); return COMPACT_ATTR;
          }
        case 149: break;
        case 2: 
          { /*Ignore*/
          }
        case 150: break;
        case 42: 
          { lexeme=yytext(); return HeadOpen;
          }
        case 151: break;
        case 59: 
          { lexeme=yytext(); return NOHREF_ATTR;
          }
        case 152: break;
        case 86: 
          { lexeme=yytext(); return AddressOpen;
          }
        case 153: break;
        case 19: 
          { lexeme=yytext(); return AClose;
          }
        case 154: break;
        case 115: 
          { lexeme=yytext(); return ColgroupClose;
          }
        case 155: break;
        case 11: 
          { lexeme=yytext(); return DdOpen;
          }
        case 156: break;
        case 78: 
          { lexeme=yytext(); return TYPE_ATTR;
          }
        case 157: break;
        case 114: 
          { lexeme=yytext(); return BaseFontClose;
          }
        case 158: break;
        case 40: 
          { lexeme=yytext(); return FormOpen;
          }
        case 159: break;
        case 17: 
          { lexeme=yytext(); return ImgOpen;
          }
        case 160: break;
        case 61: 
          { lexeme=yytext(); return BUTTONOpen;
          }
        case 161: break;
        case 4: 
          { lexeme=yytext(); return BOpen;
          }
        case 162: break;
        case 113: 
          { lexeme=yytext(); return BLOCKQUOTEOpen;
          }
        case 163: break;
        case 25: 
          { lexeme=yytext(); return DfnOpen;
          }
        case 164: break;
        case 41: 
          { lexeme=yytext(); return HtmlOpen;
          }
        case 165: break;
        case 1: 
          { return ERROR;
          }
        case 166: break;
        case 63: 
          { lexeme=yytext(); return BaseClose;
          }
        case 167: break;
        case 22: 
          { lexeme=yytext(); return DirOpen;
          }
        case 168: break;
        case 96: 
          { lexeme=yytext(); return BUTTONClose;
          }
        case 169: break;
        case 62: 
          { lexeme=yytext(); return BodyClose;
          }
        case 170: break;
        case 73: 
          { lexeme=yytext(); return HREF_ATTR;
          }
        case 171: break;
        case 110: 
          { lexeme=yytext(); return AddressClose;
          }
        case 172: break;
        case 55: 
          { lexeme=yytext(); return FrameOpen;
          }
        case 173: break;
        case 29: 
          { lexeme=yytext(); return EmClose;
          }
        case 174: break;
        case 35: 
          { lexeme=yytext(); return CiteOpen;
          }
        case 175: break;
        case 8: 
          { lexeme=yytext(); return EmOpen;
          }
        case 176: break;
        case 65: 
          { lexeme=yytext(); return CodeClose;
          }
        case 177: break;
        case 70: 
          { lexeme=yytext(); return HtmlClose;
          }
        case 178: break;
        case 111: 
          { lexeme=yytext(); return BGCOLOR_ATTR;
          }
        case 179: break;
        case 32: 
          { lexeme=yytext(); return DdClose;
          }
        case 180: break;
        case 76: 
          { lexeme=yytext(); return NAME_ATTR;
          }
        case 181: break;
        case 27: 
          { lexeme=yytext(); return BaseOpen;
          }
        case 182: break;
        case 77: 
          { lexeme=yytext(); return SIZE_ATTR_HR;
          }
        case 183: break;
        case 44: 
          { lexeme=yytext(); return BigClose;
          }
        case 184: break;
        case 87: 
          { lexeme=yytext(); return ALINK_ATTR;
          }
        case 185: break;
        case 9: 
          { lexeme=yytext(); return DlOpen;
          }
        case 186: break;
        case 104: 
          { lexeme=yytext(); return COORDS_ATTR;
          }
        case 187: break;
        case 97: 
          { lexeme=yytext(); return CenterClose;
          }
        case 188: break;
        case 54: 
          { lexeme=yytext(); return LabelOpen;
          }
        case 189: break;
        case 119: 
          { lexeme=yytext(); return BLOCKQUOTEClose;
          }
        case 190: break;
        case 98: 
          { lexeme=yytext(); return ColgroupOpen;
          }
        case 191: break;
        case 37: 
          { lexeme=yytext(); return AbbrOpen;
          }
        case 192: break;
        case 89: 
          { lexeme=yytext(); return COLOR_ATTR;
          }
        case 193: break;
        case 80: 
          { lexeme=yytext(); return LINK_ATTR;
          }
        case 194: break;
        case 94: 
          { lexeme=yytext(); return WIDTH_ATTR_HR;
          }
        case 195: break;
        case 100: 
          { lexeme=yytext(); return FramesetOpen;
          }
        case 196: break;
        case 117: 
          { lexeme=yytext(); return FramesetClose;
          }
        case 197: break;
        case 50: 
          { lexeme=yytext(); return DirClose;
          }
        case 198: break;
        case 31: 
          { lexeme=yytext(); return DtClose;
          }
        case 199: break;
        case 118: 
          { lexeme=yytext(); return MAXLEN_ATTR;
          }
        case 200: break;
        case 34: 
          { lexeme=yytext(); return HnClose;
          }
        case 201: break;
        case 84: 
          { lexeme=yytext(); return CaptionOpen;
          }
        case 202: break;
        case 120: 
          { lexeme=yytext(); return BACKGROUND_ATTR;
          }
        case 203: break;
        case 105: 
          { lexeme=yytext(); return METHOD_ATTR;
          }
        case 204: break;
        case 47: 
          { lexeme=yytext(); return ImgClose;
          }
        case 205: break;
        case 95: 
          { lexeme=yytext(); return BaseFontOpen;
          }
        case 206: break;
        case 12: 
          { lexeme=yytext(); return HrOpen;
          }
        case 207: break;
        case 52: 
          { lexeme=yytext(); return DelClose;
          }
        case 208: break;
        case 93: 
          { lexeme=yytext(); return TITLE_ATTR;
          }
        case 209: break;
        case 14: 
          { lexeme=yytext(); return BigOpen;
          }
        case 210: break;
        case 3: 
          { lexeme=yytext(); return Content;
          }
        case 211: break;
        case 91: 
          { lexeme=yytext(); return VALUE_ATTR;
          }
        case 212: break;
        case 103: 
          { lexeme=yytext(); return ACTION_ATTR;
          }
        case 213: break;
        case 21: 
          { lexeme=yytext(); return KbdOpen;
          }
        case 214: break;
        case 26: 
          { lexeme=yytext(); return BodyOpen;
          }
        case 215: break;
        case 10: 
          { lexeme=yytext(); return DtOpen;
          }
        case 216: break;
        case 88: 
          { lexeme=yytext(); return ALIGN_ATTR;
          }
        case 217: break;
        case 45: 
          { lexeme=yytext(); return BdoClose;
          }
        case 218: break;
        case 90: 
          { lexeme=yytext(); return SHAPE_ATTR;
          }
        case 219: break;
        case 82: 
          { lexeme=yytext(); return LabelClose;
          }
        case 220: break;
        case 58: 
          { lexeme=yytext(); return ALT_ATTR;
          }
        case 221: break;
        case 38: 
          { lexeme=yytext(); return AreaOpen;
          }
        case 222: break;
        case 116: 
          { lexeme=yytext(); return FieldsetClose;
          }
        case 223: break;
        case 51: 
          { lexeme=yytext(); return DivClose;
          }
        case 224: break;
        case 7: 
          { lexeme=yytext(); return BrOpen;
          }
        case 225: break;
        case 102: 
          { lexeme=yytext(); return HSPACE_ATTR;
          }
        case 226: break;
        case 92: 
          { lexeme=yytext(); return VLINK_ATTR;
          }
        case 227: break;
        case 33: 
          { lexeme=yytext(); return HrClose;
          }
        case 228: break;
        case 15: 
          { lexeme=yytext(); return BdoOpen;
          }
        case 229: break;
        case 53: 
          { lexeme=yytext(); return DfnClose;
          }
        case 230: break;
        case 48: 
          { lexeme=yytext(); return ColClose;
          }
        case 231: break;
        case 57: 
          { lexeme=yytext(); return REL_ATTR;
          }
        case 232: break;
        case 112: 
          { lexeme=yytext(); return ENCTYPE_ATTR;
          }
        case 233: break;
        case 83: 
          { lexeme=yytext(); return FrameClose;
          }
        case 234: break;
        case 107: 
          { lexeme=yytext(); return USEMAP_ATTR;
          }
        case 235: break;
        case 67: 
          { lexeme=yytext(); return AreaClose;
          }
        case 236: break;
        case 101: 
          { lexeme=yytext(); return BORDER_ATTR;
          }
        case 237: break;
        case 20: 
          { lexeme=yytext(); return ColOpen;
          }
        case 238: break;
        case 75: 
          { lexeme=yytext(); return CHECKED_ATTR;
          }
        case 239: break;
        case 16: 
          { lexeme=yytext(); return InsOpen;
          }
        case 240: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
