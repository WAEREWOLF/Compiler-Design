/* The following code was generated by JFlex 1.4.3 on 1/9/21 10:04 PM */


package myPackage;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/9/21 10:04 PM from the specification file
 * <tt>D:/FACULTATE AUTOMATICA/ANI de studiu/ANUL 4/TranslatorDesignProject/src/myPackage/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 45,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  7, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 47,  2,  0, 
     0, 17,  4, 10, 16, 15, 19,  6, 27,  5,  0, 11,  8, 34, 20,  9, 
    42, 12, 29, 18, 14, 13, 38,  0,  0, 24,  0,  0,  0,  0,  0,  0, 
     0, 31, 21, 32, 23, 36, 50, 52, 28, 44,  0, 53, 51, 35, 33, 22, 
    43,  0, 30, 37, 41, 40, 39, 49, 54, 25, 46,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\2\13\1\1\2"+
    "\2\1\1\4\1\5\7\0\1\6\1\0\1\5\46\0"+
    "\1\7\26\0\1\10\1\0\1\11\1\12\1\0\1\13"+
    "\12\0\1\14\1\15\41\0\1\16\3\0\1\17\2\0"+
    "\1\20\1\0\1\21\1\22\27\0\1\23\14\0\1\24"+
    "\3\0\1\25\1\26\1\27\1\30\1\31\54\0\1\32"+
    "\1\0\2\33\10\0\1\34\12\0\1\35\2\0\1\36"+
    "\1\37\1\0\1\40\12\0\1\41\1\42\1\0\1\43"+
    "\1\0\1\44\2\0\1\45\2\0\1\46\1\0\1\47"+
    "\1\50\1\0\1\51\1\52\44\0\1\53\1\54\3\0"+
    "\1\55\2\0\1\56\1\0\1\57\2\0\1\60\4\0"+
    "\1\61\1\62\1\63\1\64\1\65\11\0\1\66\6\0"+
    "\1\67\5\0\1\70\1\71\1\0\1\72\6\0\1\73"+
    "\5\0\1\74\14\0\1\75\2\0\1\76\1\0\1\77"+
    "\3\0\1\100\1\0\1\101\2\0\1\102\2\0\1\103"+
    "\1\0\1\104\1\105\1\0\1\106\1\0\1\107\10\0"+
    "\1\110\5\0\1\111\1\0\1\112\1\113\4\0\1\114"+
    "\4\0\1\115\1\116\3\0\1\117\5\0\1\120\1\121"+
    "\6\0\1\122\2\0\1\123\1\124\1\125\7\0\1\126"+
    "\1\127\1\0\1\130\3\0\1\131\1\132\1\0\1\133"+
    "\1\0\1\134\1\135\1\136\1\0\1\137\1\0\1\140"+
    "\2\0\1\141\5\0\1\142\1\143\1\144\1\145\2\0"+
    "\1\146\1\147\1\150\1\0\1\151\1\0\1\152\1\153"+
    "\4\0\1\154\1\155\1\156\3\0\1\157\1\0\1\160"+
    "\1\161\1\0\1\162\1\163\1\164\1\165\4\0\1\166"+
    "\1\167\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\67"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\67\0\u13fb"+
    "\0\67\0\67\0\u1432\0\67\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\67\0\67"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\67\0\u1da6\0\u1ddd\0\u1e14\0\67\0\u1e4b\0\u1e82"+
    "\0\67\0\u1eb9\0\67\0\67\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\67\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\67\0\67\0\67\0\67"+
    "\0\67\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b"+
    "\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53"+
    "\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3"+
    "\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\67\0\u30c5\0\u30fc"+
    "\0\67\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d"+
    "\0\u32b4\0\67\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe"+
    "\0\u3435\0\u346c\0\u34a3\0\u34da\0\67\0\u3511\0\u3548\0\67"+
    "\0\67\0\u357f\0\67\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\67\0\67\0\u37dc"+
    "\0\67\0\u3813\0\67\0\u384a\0\u3881\0\67\0\u38b8\0\u38ef"+
    "\0\67\0\u3926\0\67\0\67\0\u395d\0\67\0\67\0\u3994"+
    "\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc"+
    "\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074"+
    "\0\u40ab\0\u40e2\0\u4119\0\67\0\67\0\u4150\0\u4187\0\u41be"+
    "\0\67\0\u41f5\0\u422c\0\67\0\u4263\0\67\0\u429a\0\u42d1"+
    "\0\67\0\u4308\0\u433f\0\u4376\0\u43ad\0\67\0\67\0\67"+
    "\0\67\0\67\0\u43e4\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7"+
    "\0\u452e\0\u4565\0\u459c\0\67\0\u45d3\0\u460a\0\u4641\0\u4678"+
    "\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2\0\u47f9\0\u4830"+
    "\0\67\0\67\0\u4867\0\67\0\u489e\0\u48d5\0\u490c\0\u4943"+
    "\0\u497a\0\u49b1\0\67\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4"+
    "\0\67\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45"+
    "\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\67\0\u4d8f\0\u4dc6"+
    "\0\67\0\u4dfd\0\67\0\u4e34\0\u4e6b\0\u4ea2\0\67\0\u4ed9"+
    "\0\67\0\u4f10\0\u4f47\0\67\0\u4f7e\0\u4fb5\0\67\0\u4fec"+
    "\0\67\0\67\0\u5023\0\67\0\u505a\0\67\0\u5091\0\u50c8"+
    "\0\u50ff\0\u5136\0\u516d\0\u51a4\0\u51db\0\u5212\0\67\0\u5249"+
    "\0\u5280\0\u52b7\0\u52ee\0\u5325\0\67\0\u535c\0\67\0\67"+
    "\0\u5393\0\u53ca\0\u5401\0\u5438\0\67\0\u546f\0\u54a6\0\u54dd"+
    "\0\u5514\0\67\0\67\0\u554b\0\u5582\0\u55b9\0\67\0\u55f0"+
    "\0\u5627\0\u565e\0\u5695\0\u56cc\0\67\0\67\0\u5703\0\u573a"+
    "\0\u5771\0\u57a8\0\u57df\0\u5816\0\67\0\u584d\0\u5884\0\67"+
    "\0\67\0\67\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce"+
    "\0\u5a05\0\67\0\67\0\u5a3c\0\67\0\u5a73\0\u5aaa\0\u5ae1"+
    "\0\67\0\67\0\u5b18\0\67\0\u5b4f\0\67\0\67\0\67"+
    "\0\u5b86\0\67\0\u5bbd\0\67\0\u5bf4\0\u5c2b\0\67\0\u5c62"+
    "\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e\0\67\0\67\0\67\0\67"+
    "\0\u5d75\0\u5dac\0\67\0\67\0\67\0\u5de3\0\67\0\u5e1a"+
    "\0\67\0\67\0\u5e51\0\u5e88\0\u5ebf\0\u5ef6\0\67\0\67"+
    "\0\67\0\u5f2d\0\u5f64\0\u5f9b\0\67\0\u5fd2\0\67\0\67"+
    "\0\u6009\0\67\0\67\0\67\0\67\0\u6040\0\u6077\0\u60ae"+
    "\0\u60e5\0\67\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\21\2\1\6\4\2\1\7"+
    "\1\2\1\10\1\2\1\11\1\12\1\13\1\14\1\2"+
    "\1\15\1\16\1\17\1\2\1\20\1\21\1\22\3\2"+
    "\1\23\3\2\1\24\1\2\1\25\3\2\70\0\1\3"+
    "\30\0\1\3\22\0\1\3\11\0\1\26\1\4\1\26"+
    "\1\0\26\26\1\4\22\26\1\4\11\26\4\0\1\27"+
    "\1\30\1\0\1\31\1\32\1\0\1\33\1\34\3\0"+
    "\1\35\1\36\1\37\1\0\1\40\1\0\1\41\5\0"+
    "\1\42\1\43\2\0\1\37\1\44\54\0\1\45\10\0"+
    "\1\46\24\0\1\47\3\0\1\3\1\0\1\50\26\0"+
    "\1\7\22\0\1\7\47\0\1\51\6\0\1\52\65\0"+
    "\1\53\62\0\1\54\22\0\1\55\31\0\1\56\5\0"+
    "\1\57\60\0\1\60\10\0\1\61\66\0\1\62\4\0"+
    "\1\63\63\0\1\64\61\0\1\65\1\0\1\66\15\0"+
    "\1\67\51\0\1\70\5\0\1\71\15\0\1\72\50\0"+
    "\1\73\52\0\1\74\12\0\1\75\7\0\1\76\13\0"+
    "\1\3\1\0\1\77\26\0\1\7\22\0\1\23\65\0"+
    "\1\100\66\0\1\101\12\0\3\26\1\0\63\26\5\0"+
    "\1\102\2\0\1\103\1\104\3\0\1\105\2\0\1\106"+
    "\1\107\4\0\1\104\6\0\2\110\1\111\10\0\1\105"+
    "\42\0\1\112\15\0\1\113\30\0\1\114\1\115\2\0"+
    "\1\116\1\0\1\117\1\120\3\0\1\121\1\122\1\123"+
    "\1\0\1\124\1\0\1\125\5\0\1\126\1\127\2\0"+
    "\1\123\1\130\47\0\1\131\52\0\1\132\3\0\1\133"+
    "\5\0\1\134\1\0\1\135\15\0\1\135\33\0\1\136"+
    "\124\0\1\137\31\0\1\140\2\0\1\141\5\0\1\142"+
    "\1\143\1\144\2\0\1\145\47\0\1\146\5\0\1\147"+
    "\5\0\1\150\4\0\1\146\1\0\1\150\5\0\2\151"+
    "\1\0\1\147\33\0\1\152\3\0\1\153\23\0\1\154"+
    "\42\0\1\104\3\0\1\105\3\0\1\111\4\0\1\104"+
    "\6\0\2\110\1\111\10\0\1\105\34\0\1\155\1\156"+
    "\15\0\2\157\2\0\1\160\62\0\2\157\51\0\1\135"+
    "\15\0\1\135\65\0\1\161\70\0\1\162\66\0\1\163"+
    "\47\0\1\164\11\0\2\43\2\0\1\164\73\0\1\165"+
    "\75\0\1\166\62\0\1\167\13\0\1\170\54\0\1\171"+
    "\66\0\1\172\2\0\1\173\40\0\1\174\14\0\1\175"+
    "\17\0\1\176\47\0\1\177\56\0\1\200\75\0\1\201"+
    "\111\0\1\202\51\0\1\203\55\0\1\204\65\0\1\205"+
    "\67\0\1\206\104\0\1\207\73\0\1\210\56\0\1\211"+
    "\67\0\1\212\56\0\1\213\75\0\1\214\101\0\1\215"+
    "\51\0\1\216\24\0\1\217\11\0\1\164\11\0\2\43"+
    "\2\0\1\164\56\0\1\220\100\0\1\221\33\0\1\222"+
    "\71\0\1\223\75\0\1\224\6\0\1\224\55\0\1\225"+
    "\32\0\1\225\26\0\1\226\77\0\1\227\22\0\1\230"+
    "\43\0\1\230\22\0\1\230\43\0\1\231\27\0\1\232"+
    "\22\0\1\233\62\0\1\234\2\0\1\235\2\0\1\236"+
    "\1\237\3\0\1\240\2\0\1\241\1\242\4\0\1\237"+
    "\6\0\2\243\1\244\10\0\1\240\42\0\1\245\15\0"+
    "\1\246\45\0\1\247\52\0\1\250\3\0\1\251\5\0"+
    "\1\252\1\0\1\253\15\0\1\253\33\0\1\254\124\0"+
    "\1\255\31\0\1\256\2\0\1\257\5\0\1\260\1\261"+
    "\1\262\2\0\1\263\45\0\1\264\1\0\1\265\5\0"+
    "\1\266\5\0\1\267\4\0\1\265\1\0\1\267\5\0"+
    "\2\270\1\0\1\266\33\0\1\271\3\0\1\272\23\0"+
    "\1\273\33\0\1\234\6\0\1\237\3\0\1\240\3\0"+
    "\1\244\4\0\1\237\6\0\2\243\1\244\10\0\1\240"+
    "\35\0\1\274\15\0\2\275\2\0\1\276\62\0\2\275"+
    "\51\0\1\253\15\0\1\253\33\0\1\277\100\0\1\300"+
    "\60\0\1\301\7\0\1\302\72\0\1\303\114\0\2\304"+
    "\33\0\1\305\103\0\1\306\10\0\2\307\27\0\1\310"+
    "\102\0\1\311\46\0\1\312\20\0\1\312\76\0\2\313"+
    "\50\0\1\314\6\0\1\314\56\0\1\315\24\0\1\315"+
    "\41\0\1\316\73\0\1\317\10\0\1\320\52\0\1\321"+
    "\107\0\1\322\45\0\1\323\74\0\1\324\124\0\1\325"+
    "\27\0\1\326\60\0\1\150\6\0\1\150\121\0\1\327"+
    "\43\0\1\330\106\0\1\331\66\0\1\332\63\0\1\333"+
    "\71\0\1\334\50\0\1\335\22\0\1\336\40\0\1\337"+
    "\103\0\1\340\41\0\1\341\100\0\1\342\64\0\1\343"+
    "\74\0\1\344\105\0\1\345\37\0\1\346\103\0\1\347"+
    "\70\0\1\350\72\0\1\351\53\0\1\352\72\0\1\353"+
    "\55\0\1\354\70\0\1\355\70\0\1\356\67\0\1\357"+
    "\73\0\1\360\100\0\1\361\36\0\1\362\104\0\1\363"+
    "\102\0\1\364\13\0\1\365\104\0\2\366\53\0\1\367"+
    "\32\0\1\367\34\0\1\370\24\0\1\371\41\0\1\371"+
    "\24\0\1\371\37\0\1\372\57\0\1\373\71\0\1\374"+
    "\75\0\1\375\6\0\1\375\55\0\1\376\32\0\1\376"+
    "\26\0\1\377\77\0\1\u0100\22\0\1\u0101\23\0\1\u0102"+
    "\106\0\1\u0101\22\0\1\u0101\43\0\1\u0103\27\0\1\u0104"+
    "\22\0\1\u0105\64\0\1\u0106\100\0\1\u0107\60\0\1\u0108"+
    "\7\0\1\u0109\72\0\1\u010a\114\0\2\u010b\33\0\1\u010c"+
    "\50\0\1\u010d\121\0\1\u010e\10\0\2\u010f\21\0\1\u0110"+
    "\66\0\1\u0111\74\0\1\u0112\60\0\1\u0113\110\0\1\u0114"+
    "\46\0\1\u0115\20\0\1\u0115\76\0\2\u0116\50\0\1\u0117"+
    "\6\0\1\u0117\56\0\1\u0118\24\0\1\u0118\41\0\1\u0119"+
    "\73\0\1\u011a\10\0\1\u011b\52\0\1\u011c\66\0\1\u011d"+
    "\47\0\1\u011e\66\0\1\u011f\103\0\1\u0120\66\0\1\u0121"+
    "\55\0\1\u0122\77\0\1\u0123\65\0\1\u0124\66\0\1\u0125"+
    "\32\0\1\u0125\52\0\2\u0126\41\0\1\u0127\14\0\1\u0127"+
    "\75\0\2\u0128\51\0\1\u0129\15\0\1\u0129\37\0\1\u012a"+
    "\74\0\1\u012b\112\0\1\u012c\66\0\1\u012d\34\0\1\u012e"+
    "\76\0\1\u012f\112\0\1\u0130\106\0\1\u0131\65\0\1\u0132"+
    "\62\0\1\u0133\47\0\1\u0134\106\0\1\u0135\66\0\1\u0136"+
    "\34\0\1\u0137\120\0\1\u0138\73\0\1\u0139\42\0\1\u013a"+
    "\54\0\1\u013b\76\0\1\u013c\65\0\1\u013d\115\0\1\u013e"+
    "\45\0\1\u013f\101\0\1\u0140\53\0\1\u0141\50\0\1\u0142"+
    "\71\0\1\u0143\101\0\1\u0144\102\0\1\u0145\65\0\1\u0146"+
    "\53\0\1\u0147\62\0\1\u0148\113\0\1\u0149\40\0\1\u014a"+
    "\106\0\1\u014b\66\0\1\u014c\53\0\1\u014d\40\0\1\u014e"+
    "\104\0\1\u014f\111\0\1\u0150\22\0\1\u0151\64\0\1\u0152"+
    "\14\0\1\u0152\63\0\1\u0153\61\0\1\u0154\52\0\1\u0155"+
    "\76\0\1\u0156\104\0\2\u0157\53\0\1\u0158\32\0\1\u0158"+
    "\17\0\1\u0159\103\0\1\u015a\24\0\1\u015b\41\0\1\u015b"+
    "\24\0\1\u015b\24\0\1\u015c\101\0\1\u015d\53\0\1\u015e"+
    "\103\0\1\u015f\66\0\1\u0160\51\0\1\u0161\3\0\1\u0162"+
    "\77\0\1\u0163\65\0\1\u0164\66\0\1\u0165\32\0\1\u0165"+
    "\17\0\1\u0166\66\0\1\u0167\66\0\1\u0168\66\0\1\u0169"+
    "\66\0\1\u016a\121\0\2\u016b\41\0\1\u016c\14\0\1\u016c"+
    "\75\0\2\u016d\51\0\1\u016e\15\0\1\u016e\37\0\1\u016f"+
    "\74\0\1\u0170\112\0\1\u0171\66\0\1\u0172\44\0\1\u0173"+
    "\56\0\1\u0174\113\0\1\u0175\50\0\1\u0176\54\0\1\u0177"+
    "\46\0\1\u0177\36\0\1\u0178\14\0\1\u0178\44\0\1\u0179"+
    "\24\0\1\u0179\42\0\1\u017a\65\0\1\u017b\105\0\1\u017c"+
    "\66\0\1\u017d\56\0\1\u017e\120\0\1\u017f\52\0\1\u0180"+
    "\22\0\60\u0135\1\u0181\6\u0135\60\u0136\1\u0182\6\u0136\41\0"+
    "\1\u0183\25\0\60\u0138\1\u0184\6\u0138\57\0\1\u0185\66\0"+
    "\1\u0186\54\0\1\u0187\61\0\1\u0188\105\0\1\u0189\53\0"+
    "\1\u018a\104\0\1\u018b\64\0\1\u018c\47\0\1\u018d\54\0"+
    "\1\u018e\112\0\1\u018f\72\0\1\u0190\7\0\60\u0145\1\u0191"+
    "\6\u0145\60\0\1\u0192\65\0\1\u0193\53\0\1\u0194\101\0"+
    "\1\u0195\62\0\1\u0196\73\0\1\u0197\66\0\1\u0198\65\0"+
    "\1\u0199\51\0\1\u019a\103\0\1\u019b\67\0\1\u019c\22\0"+
    "\1\u019d\76\0\1\u019e\14\0\1\u019e\36\0\1\u019f\70\0"+
    "\1\u01a0\55\0\1\u01a1\75\0\1\u01a2\14\0\1\u01a2\42\0"+
    "\1\u01a3\20\0\1\u01a4\45\0\1\u01a3\102\0\1\u01a5\60\0"+
    "\1\u01a6\60\0\1\u01a7\121\0\1\u01a8\33\0\1\u01a9\103\0"+
    "\1\u01aa\54\0\1\u01ab\46\0\1\u01ab\14\0\1\u01ac\110\0"+
    "\1\u01ad\14\0\1\u01ad\44\0\1\u01ae\24\0\1\u01ae\24\0"+
    "\1\u01af\104\0\1\u01b0\50\0\1\u01b1\66\0\1\u01b2\103\0"+
    "\1\u01b3\51\0\1\u01b4\75\0\1\u01b5\112\0\1\u01b6\42\0"+
    "\1\u01b7\14\0\1\u01b7\70\0\2\u01b8\57\0\1\u01b9\22\0"+
    "\1\u01b9\43\0\1\u01ba\66\0\1\u01bb\123\0\1\u01bc\35\0"+
    "\1\u01bd\76\0\1\u01be\30\0\60\u017f\1\u01bf\6\u017f\57\0"+
    "\1\u01c0\66\0\1\u01c1\67\0\1\u01c2\66\0\1\u01c3\65\0"+
    "\1\u01c4\60\0\1\u01c5\75\0\1\u01c6\35\0\1\u01c7\37\0"+
    "\60\u018c\1\u01c8\6\u018c\64\0\1\u01c9\61\0\1\u01ca\53\0"+
    "\1\u01cb\102\0\1\u01cc\6\0\60\u0192\1\u01cd\6\u0192\60\0"+
    "\1\u01ce\65\0\1\u01cf\67\0\1\u01d0\65\0\1\u01d1\7\0"+
    "\60\u0197\1\u01d2\6\u0197\60\u0198\1\u01d3\6\u0198\60\0\1\u01d4"+
    "\16\0\1\u01d5\136\0\1\u01d6\6\0\60\u019c\1\u01d7\6\u019c"+
    "\15\0\1\u01d8\75\0\1\u01d9\56\0\1\u01da\76\0\1\u01db"+
    "\14\0\1\u01db\36\0\1\u01dc\57\0\1\u01dd\66\0\1\u01de"+
    "\75\0\1\u01df\112\0\1\u01e0\42\0\1\u01e1\14\0\1\u01e1"+
    "\70\0\2\u01e2\57\0\1\u01e3\22\0\1\u01e3\43\0\1\u01e4"+
    "\46\0\1\u01e5\17\0\1\u01e6\61\0\1\u01e7\75\0\1\u01e8"+
    "\14\0\1\u01e8\67\0\2\u01e9\45\0\1\u01ea\22\0\1\u01ea"+
    "\40\0\1\u01eb\66\0\1\u01ec\127\0\1\u01ed\56\0\1\u01ee"+
    "\75\0\1\u01ef\67\0\1\u01f0\66\0\1\u01f1\6\0\60\u01c2"+
    "\1\u01f2\6\u01c2\60\u01c3\1\u01f3\6\u01c3\60\0\1\u01f4\6\0"+
    "\60\u01c6\1\u01f5\6\u01c6\51\0\1\u01f6\75\0\1\u01f7\65\0"+
    "\1\u01f8\7\0\60\u01cc\1\u01f9\6\u01cc\60\u01ce\1\u01fa\6\u01ce"+
    "\60\0\1\u01fb\6\0\60\u01d0\1\u01fc\6\u01d0\60\0\1\u01fd"+
    "\6\0\60\u01d4\1\u01fe\6\u01d4\2\0\1\u01ff\64\0\60\u01d6"+
    "\1\u0200\6\u01d6\11\0\1\u0201\73\0\1\u0202\65\0\1\u0203"+
    "\53\0\1\u0204\110\0\1\u0205\57\0\1\u0206\53\0\1\u0207"+
    "\110\0\1\u0208\14\0\1\u0208\67\0\2\u0209\45\0\1\u020a"+
    "\22\0\1\u020a\40\0\1\u020b\66\0\1\u020c\121\0\1\u020d"+
    "\32\0\1\u020e\66\0\1\u020f\50\0\60\u01ed\1\u0210\6\u01ed"+
    "\41\0\1\u0211\105\0\1\u0212\6\0\60\u01f0\1\u0213\6\u01f0"+
    "\60\u01f1\1\u0214\6\u01f1\60\u01f4\1\u0215\6\u01f4\34\0\1\u0216"+
    "\32\0\60\u01f7\1\u0217\6\u01f7\60\0\1\u0218\6\0\60\u01fb"+
    "\1\u0219\6\u01fb\60\u01fd\1\u021a\6\u01fd\16\0\1\u021b\61\0"+
    "\1\u021c\73\0\1\u021d\122\0\1\u021e\16\0\1\u021f\66\0"+
    "\1\u0220\66\0\1\u0221\102\0\1\u0222\66\0\1\u0223\77\0"+
    "\1\u0224\37\0\60\u0212\1\u0225\6\u0212\57\0\1\u0226\7\0"+
    "\60\u0218\1\u0227\6\u0218\17\0\1\u0228\65\0\1\u0229\52\0"+
    "\1\u022a\66\0\1\u022b\66\0\1\u022c\66\0\1\u022d\143\0"+
    "\1\u022e\67\0\1\u022f\25\0\1\u0230\127\0\1\u0231\6\0"+
    "\60\u022f\1\u0232\6\u022f\2\0\1\u0233\64\0\60\u0231\1\u0234"+
    "\6\u0231";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\7\0\1\1\1\0\1\1\46\0"+
    "\1\11\26\0\1\11\1\0\2\11\1\0\1\11\12\0"+
    "\2\11\41\0\1\11\3\0\1\11\2\0\1\11\1\0"+
    "\2\11\27\0\1\11\14\0\1\1\3\0\5\11\54\0"+
    "\1\11\1\0\1\1\1\11\10\0\1\11\12\0\1\11"+
    "\2\0\2\11\1\0\1\11\12\0\2\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\2\11\44\0\2\11\3\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\5\11\11\0\1\11"+
    "\6\0\1\1\5\0\2\11\1\0\1\11\6\0\1\11"+
    "\5\0\1\11\14\0\1\11\2\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\11\10\0\1\11"+
    "\5\0\1\11\1\0\2\11\4\0\1\11\4\0\2\11"+
    "\3\0\1\11\5\0\2\11\6\0\1\11\2\0\3\11"+
    "\7\0\2\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\5\0\4\11\2\0\3\11\1\0\1\11\1\0\2\11"+
    "\4\0\3\11\3\0\1\11\1\0\2\11\1\0\4\11"+
    "\4\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 109: 
          { return symbol(sym.AcronymClose);
          }
        case 121: break;
        case 77: 
          { return symbol(sym.TYPE_ATTR);
          }
        case 122: break;
        case 118: 
          { return symbol(sym.MAXLEN_ATTR);
          }
        case 123: break;
        case 19: 
          { return symbol(sym.AClose);
          }
        case 124: break;
        case 20: 
          { return symbol(sym.ColOpen);
          }
        case 125: break;
        case 62: 
          { return symbol(sym.BodyClose);
          }
        case 126: break;
        case 103: 
          { return symbol(sym.ACTION_ATTR);
          }
        case 127: break;
        case 94: 
          { return new Symbol(sym.WIDTH_ATTR_HR, yychar, yyline, yytext());
          }
        case 128: break;
        case 114: 
          { return symbol(sym.BaseFontClose);
          }
        case 129: break;
        case 8: 
          { return symbol(sym.EmOpen);
          }
        case 130: break;
        case 21: 
          { return symbol(sym.KbdOpen);
          }
        case 131: break;
        case 65: 
          { return symbol(sym.CodeClose);
          }
        case 132: break;
        case 102: 
          { return symbol(sym.HSPACE_ATTR);
          }
        case 133: break;
        case 101: 
          { return symbol(sym.BORDER_ATTR);
          }
        case 134: break;
        case 80: 
          { return symbol(sym.InputClose);
          }
        case 135: break;
        case 120: 
          { return symbol(sym.BACKGROUND_ATTR);
          }
        case 136: break;
        case 93: 
          { return symbol(sym.HtmlClose);
          }
        case 137: break;
        case 16: 
          { return symbol(sym.InsOpen);
          }
        case 138: break;
        case 100: 
          { return symbol(sym.FramesetOpen);
          }
        case 139: break;
        case 11: 
          { return symbol(sym.DdOpen);
          }
        case 140: break;
        case 56: 
          { return symbol(sym.REV_ATTR);
          }
        case 141: break;
        case 5: 
          { return symbol(sym.BOpen);
          }
        case 142: break;
        case 15: 
          { return new Symbol(sym.BdoOpen, yychar, yyline, yytext());
          }
        case 143: break;
        case 78: 
          { return symbol(sym.TEXT_ATTR);
          }
        case 144: break;
        case 84: 
          { return symbol(sym.AcronymOpen);
          }
        case 145: break;
        case 79: 
          { return symbol(sym.LINK_ATTR);
          }
        case 146: break;
        case 82: 
          { return symbol(sym.FrameClose);
          }
        case 147: break;
        case 53: 
          { return symbol(sym.DfnClose);
          }
        case 148: break;
        case 3: 
          { return symbol(sym.EndOpenedTag);
          }
        case 149: break;
        case 63: 
          { return symbol(sym.BaseClose);
          }
        case 150: break;
        case 83: 
          { return symbol(sym.CaptionOpen);
          }
        case 151: break;
        case 13: 
          { return symbol(sym.HnOpen);
          }
        case 152: break;
        case 76: 
          { return new Symbol(sym.SIZE_ATTR_HR, yychar, yyline, yytext());
          }
        case 153: break;
        case 111: 
          { return symbol(sym.BGCOLOR_ATTR);
          }
        case 154: break;
        case 44: 
          { return symbol(sym.BigClose);
          }
        case 155: break;
        case 92: 
          { return symbol(sym.TITLE_ATTR);
          }
        case 156: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 157: break;
        case 105: 
          { return symbol(sym.METHOD_ATTR);
          }
        case 158: break;
        case 116: 
          { return symbol(sym.FieldsetClose);
          }
        case 159: break;
        case 38: 
          { return symbol(sym.AreaOpen);
          }
        case 160: break;
        case 10: 
          { return symbol(sym.DtOpen);
          }
        case 161: break;
        case 51: 
          { return symbol(sym.DivClose);
          }
        case 162: break;
        case 99: 
          { return symbol(sym.FieldsetOpen);
          }
        case 163: break;
        case 96: 
          { return symbol(sym.BUTTONClose);
          }
        case 164: break;
        case 85: 
          { return symbol(sym.AddressOpen);
          }
        case 165: break;
        case 33: 
          { return symbol(sym.HrClose);
          }
        case 166: break;
        case 6: 
          { return symbol(sym.AOpen);
          }
        case 167: break;
        case 39: 
          { return symbol(sym.FontOpen);
          }
        case 168: break;
        case 64: 
          { return symbol(sym.CiteClose);
          }
        case 169: break;
        case 37: 
          { return symbol(sym.AbbrOpen);
          }
        case 170: break;
        case 31: 
          { return symbol(sym.DtClose);
          }
        case 171: break;
        case 49: 
          { return symbol(sym.KbdClose);
          }
        case 172: break;
        case 18: 
          { return symbol(sym.BClose);
          }
        case 173: break;
        case 108: 
          { return symbol(sym.CaptionClose);
          }
        case 174: break;
        case 57: 
          { return symbol(sym.REL_ATTR);
          }
        case 175: break;
        case 45: 
          { return new Symbol(sym.BdoClose, yychar, yyline, yytext());
          }
        case 176: break;
        case 35: 
          { return symbol(sym.CiteOpen);
          }
        case 177: break;
        case 110: 
          { return symbol(sym.AddressClose);
          }
        case 178: break;
        case 75: 
          { return symbol(sym.NAME_ATTR);
          }
        case 179: break;
        case 34: 
          { return symbol(sym.HnClose);
          }
        case 180: break;
        case 115: 
          { return symbol(sym.ColgroupClose);
          }
        case 181: break;
        case 12: 
          { return symbol(sym.HrOpen);
          }
        case 182: break;
        case 74: 
          { return symbol(sym.CHECKED_ATTR);
          }
        case 183: break;
        case 58: 
          { return symbol(sym.ALT_ATTR);
          }
        case 184: break;
        case 89: 
          { return symbol(sym.SHAPE_ATTR);
          }
        case 185: break;
        case 67: 
          { return symbol(sym.AreaClose);
          }
        case 186: break;
        case 66: 
          { return symbol(sym.AbbrClose);
          }
        case 187: break;
        case 119: 
          { return symbol(sym.BLOCKQUOTEClose);
          }
        case 188: break;
        case 40: 
          { return symbol(sym.FormOpen);
          }
        case 189: break;
        case 50: 
          { return symbol(sym.DirClose);
          }
        case 190: break;
        case 69: 
          { return symbol(sym.FormClose);
          }
        case 191: break;
        case 42: 
          { return symbol(sym.HeadOpen);
          }
        case 192: break;
        case 28: 
          { return symbol(sym.BrClose);
          }
        case 193: break;
        case 22: 
          { return symbol(sym.DirOpen);
          }
        case 194: break;
        case 90: 
          { return symbol(sym.VALUE_ATTR);
          }
        case 195: break;
        case 54: 
          { return symbol(sym.LabelOpen);
          }
        case 196: break;
        case 2: 
          { return symbol(sym.LineTerminator);
          }
        case 197: break;
        case 14: 
          { return symbol(sym.BigOpen);
          }
        case 198: break;
        case 107: 
          { return symbol(sym.USEMAP_ATTR);
          }
        case 199: break;
        case 117: 
          { return symbol(sym.FramesetClose);
          }
        case 200: break;
        case 4: 
          { return new Symbol(sym.CONTENT, yychar, yyline, yytext());
          }
        case 201: break;
        case 61: 
          { return symbol(sym.BUTTONOpen);
          }
        case 202: break;
        case 104: 
          { return symbol(sym.COORDS_ATTR);
          }
        case 203: break;
        case 29: 
          { return symbol(sym.EmClose);
          }
        case 204: break;
        case 17: 
          { return symbol(sym.ImgOpen);
          }
        case 205: break;
        case 73: 
          { return symbol(sym.COMPACT_ATTR);
          }
        case 206: break;
        case 7: 
          { return symbol(sym.BrOpen);
          }
        case 207: break;
        case 9: 
          { return symbol(sym.DlOpen);
          }
        case 208: break;
        case 71: 
          { return symbol(sym.CenterOpen);
          }
        case 209: break;
        case 27: 
          { return symbol(sym.BaseOpen);
          }
        case 210: break;
        case 55: 
          { return symbol(sym.FrameOpen);
          }
        case 211: break;
        case 30: 
          { return symbol(sym.DlClose);
          }
        case 212: break;
        case 26: 
          { return symbol(sym.BodyOpen);
          }
        case 213: break;
        case 113: 
          { return symbol(sym.BLOCKQUOTEOpen);
          }
        case 214: break;
        case 98: 
          { return symbol(sym.ColgroupOpen);
          }
        case 215: break;
        case 86: 
          { return symbol(sym.ALINK_ATTR);
          }
        case 216: break;
        case 88: 
          { return symbol(sym.COLOR_ATTR);
          }
        case 217: break;
        case 70: 
          { return symbol(sym.HeadClose);
          }
        case 218: break;
        case 24: 
          { return symbol(sym.DelOpen);
          }
        case 219: break;
        case 95: 
          { return symbol(sym.BaseFontOpen);
          }
        case 220: break;
        case 36: 
          { return symbol(sym.CodeOpen);
          }
        case 221: break;
        case 41: 
          { return symbol(sym.HtmlOpen);
          }
        case 222: break;
        case 23: 
          { return symbol(sym.DivOpen);
          }
        case 223: break;
        case 52: 
          { return symbol(sym.DelClose);
          }
        case 224: break;
        case 91: 
          { return symbol(sym.VLINK_ATTR);
          }
        case 225: break;
        case 47: 
          { return symbol(sym.ImgClose);
          }
        case 226: break;
        case 59: 
          { return symbol(sym.NOHREF_ATTR);
          }
        case 227: break;
        case 97: 
          { return symbol(sym.CenterClose);
          }
        case 228: break;
        case 43: 
          { return symbol(sym.InputOpen);
          }
        case 229: break;
        case 25: 
          { return symbol(sym.DfnOpen);
          }
        case 230: break;
        case 106: 
          { return symbol(sym.VSPACE_ATTR);
          }
        case 231: break;
        case 72: 
          { return symbol(sym.HREF_URL_ATTR);
          }
        case 232: break;
        case 46: 
          { return symbol(sym.InsClose);
          }
        case 233: break;
        case 48: 
          { return symbol(sym.ColClose);
          }
        case 234: break;
        case 60: 
          { return symbol(sym.SRC_ATTR);
          }
        case 235: break;
        case 112: 
          { return symbol(sym.ENCTYPE_ATTR);
          }
        case 236: break;
        case 87: 
          { return symbol(sym.ALIGN_ATTR);
          }
        case 237: break;
        case 81: 
          { return symbol(sym.LabelClose);
          }
        case 238: break;
        case 68: 
          { return symbol(sym.FontClose);
          }
        case 239: break;
        case 32: 
          { return symbol(sym.DdClose);
          }
        case 240: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
