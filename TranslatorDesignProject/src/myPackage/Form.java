/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myPackage;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;

/**
 *
 * @author Anghel Paul David
 */
public class Form extends javax.swing.JFrame {

    /**
     * Creates new form Form
     */
    public Form() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAnalyser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextBox = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputTextBox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonAnalyser.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonAnalyser.setText("Check Lexical");
        buttonAnalyser.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonAnalyser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnalyserActionPerformed(evt);
            }
        });

        outputTextBox.setEditable(false);
        outputTextBox.setBackground(new java.awt.Color(204, 204, 204));
        outputTextBox.setColumns(20);
        outputTextBox.setRows(5);
        jScrollPane1.setViewportView(outputTextBox);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton1.setText("Check Syntax");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        inputTextBox.setColumns(20);
        inputTextBox.setRows(5);
        jScrollPane2.setViewportView(inputTextBox);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Result:");

        jButton2.setBackground(new java.awt.Color(255, 51, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("Clear");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton3.setText("DOM Parser");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonAnalyser, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(168, 168, 168)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(285, 285, 285))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(283, 283, 283))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonAnalyser, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAnalyserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnalyserActionPerformed
        File file = new File("input.txt");
        PrintWriter out;
        try {
            out = new PrintWriter(file);
            out.print(inputTextBox.getText());
            out.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Reader in = new BufferedReader(new FileReader("input.txt"));
            Lexer lexer = new Lexer(in);
            String answer = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    answer += "End of file\n";
                    outputTextBox.setText(answer);
                    return;
                }
                switch (tokens) {
                   
                    case HrOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case SIZE_ATTR_HR:                       
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case WIDTH_ATTR_HR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case HrClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case NAME_ATTR:                       
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case HREF_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case REL_ATTR:                       
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case REV_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;    
                    case TITLE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break; 
                    case AbbrClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AbbrOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;  
                    case AcronymClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AcronymOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AddressClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AddressOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AreaClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case AreaOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break; 
                    case SHAPE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case COORDS_ATTR:                       
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case HREF_URL_ATTR:
                        String values = lexer.lexeme.substring(lexer.lexeme.indexOf('"'));
                        if(values == "URL"){
                            answer += lexer.lexeme + " -> " + tokens + "-> Value: " + values + "\n";
                        }
                        else {
                            answer += lexer.lexeme + " -> " + tokens + "-> Value: " + values + "Not valid!\n";
                        }
                        break;    
                    case ALT_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case NOHREF_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break; 
                    case BOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case BClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;   
                    case BaseOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case BaseClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case BLOCKQUOTEOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case BLOCKQUOTEClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BGCOLOR_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case BACKGROUND_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case TEXT_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case ALINK_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case VLINK_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case LINK_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;    
                    case BrOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case BrClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case BUTTONOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case BUTTONClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case CaptionOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case CaptionClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case CenterOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case CenterClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case CiteOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case CiteClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case CodeOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case CodeClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case ColOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case ColClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case ColgroupOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case ColgroupClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DdOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DdClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case DelOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DelClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case DfnOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DfnClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case DivOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case DivClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case COMPACT_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DirOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DirClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DlOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DlClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case DtOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case DtClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case EmOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case EmClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case FieldsetOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case FieldsetClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break; 
                    case ALIGN_ATTR:
                        String value1 = lexer.lexeme.substring(lexer.lexeme.indexOf('"')+1, lexer.lexeme.length()-1);
                        if(value1.contentEquals("left") || value1.contentEquals("center") || value1.contentEquals("right")){
                            answer += lexer.lexeme + " -> " + tokens + "-> Value: " + value1 + "\n";
                        }
                        else {
                            answer += lexer.lexeme + " -> " + tokens + "-> Value: " + value1 + " INCORRECT value!\n";
                        }
                        break;       
                    case FontOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case FontClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case FormOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case FormClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case ACTION_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case METHOD_ATTR:
                        String value3 = lexer.lexeme.substring(lexer.lexeme.indexOf('"')+1, lexer.lexeme.length() - 1);                       
                        if(value3.equals("post") || value3.equals("get")){
                          answer += lexer.lexeme + " -> " + tokens + "-> Value: " + value3 + "\n";  
                        }
                        else answer += lexer.lexeme + " -> " + tokens + "-> Value: " + value3 + "INCORRECT!\n";
                        break;
                    case ENCTYPE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;     
                    case COLOR_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;    
                    case FrameOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case FrameClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case FramesetOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case FramesetClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case HeadOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case HeadClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case HnOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case HnClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case HtmlOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case HtmlClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case ImgOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case ImgClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case SRC_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case HEIGHT_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case HSPACE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case VSPACE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case BORDER_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;     
                    case USEMAP_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case InputOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case InputClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case InsOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case InsClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case KbdOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;     
                    case KbdClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case LabelOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;                       
                    case LabelClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;    
                    case TYPE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case VALUE_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case MAXLEN_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "-> Value: " + lexer.lexeme.substring(lexer.lexeme.indexOf('"')) + "\n";
                        break;
                    case CHECKED_ATTR:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                   
                    case BigOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BigClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BdoOpen:
                         if (lexer.lexeme.equals("<BDO>")) {
                            answer += lexer.lexeme + " -> " + tokens + "\n";
                        } else {
                            answer += "Undefiend simbol\n";
                        }
                        break;
                    case BdoClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BaseFontOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BaseFontClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BodyOpen:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case BodyClose:
                        answer += lexer.lexeme + " -> " + tokens + "\n";
                        break;
                    case Content: 
                       answer += lexer.lexeme.substring(1) + " -> " + tokens + "\n";
                       break; 
                    case ERROR:                        
                        answer += "Sytax error\n";
                        break;

                    default:
                        answer += "Token: " + " -> " + tokens + "\n";
                        break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAnalyserActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String st = inputTextBox.getText();
        Sintax s = new Sintax(new myPackage.LexerCup(new StringReader(st)));
        //Node node = new Node();
        try {
            s.parse();
            s.symTable.printSymbolsTable();
            System.out.println("\n*** Sintax Tree ***\n");
            s.root.printAst(1);           
            outputTextBox.setText("Successfully checked!");
            
            outputTextBox.setForeground(new Color (25,111,61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            
            outputTextBox.setText("Syntax error! \n"+ "Line: " + (sym.right + 1) + ", Column: " + (sym.left + 1) + "\nSymbol starting at: " + sym.value + "\n");
            outputTextBox.setForeground(Color.red);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          outputTextBox.setText(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DomParser dom = new DomParser();
        try {

            File file = new File("C:\\Users\\ANGHEL PAUL\\input.txt");
            try (PrintWriter out = new PrintWriter(file)) {
                out.println(inputTextBox.getText());
            }
            
            DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance()
                                     .newDocumentBuilder();

            Document doc = dBuilder.parse(file);
            JOptionPane.showMessageDialog(this, "Your input was saved to: \nC:/Users/ANGHEL PAUL/input.txt \n The saved file will be parsed with DOM parser!");
            outputTextBox.setText("");
            outputTextBox.setForeground(new Color (51,51,255));
            outputTextBox.append("Root element :" + doc.getDocumentElement().getNodeName());

            if (doc.hasChildNodes()) {

                dom.printNode(doc.getChildNodes(), outputTextBox);

            }

    } catch (Exception e) {
    System.out.println(e.getMessage());
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAnalyser;
    private javax.swing.JTextArea inputTextBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea outputTextBox;
    // End of variables declaration//GEN-END:variables
}
